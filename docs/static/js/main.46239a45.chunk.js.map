{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAe5C,OACI,sBAAMC,SAVY,SAACC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdnB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAUH,GAH7C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,mBAAGI,UAAU,SAAb,SAAuBJ,QCHtBO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAqBtC,OAfAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GAEpBH,EAAS,CACAf,KAAMkB,EACNL,SAAS,SAQtB,CAACpB,IAEGqB,EDlBwBK,CAAa1B,GAAhCa,EAFuB,EAE5BN,KAAaa,EAFe,EAEfA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,2CAAd,SAA0DhB,IACzDoB,GAAW,mBAAGJ,UAAU,2CAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEZrCgB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,aAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAI9B,OACI,qCACI,oBAAI+B,UAAU,0CAAd,0BACA,cAAC,EAAD,CAAa/B,cAAeA,IAC5B,uBAGA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCZtC6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.46239a45.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'; \r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState(''); \r\n    const handdleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handdleSubmit = (e) => {\r\n        e.preventDefault(); \r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue(''); \r\n        }\r\n    \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handdleSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handdleInputChange}/>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async(category) => {\r\n\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=CWg1RPwRg2XFF9Ogl3q4H70lAR71sJs8`; \r\n    const resp = await fetch(url); \r\n    const {data} = await resp.json(); \r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs; \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__rubberBand\">\r\n            <img src={url} alt={title}/>\r\n            <p className=\"titulo\">{title}</p> \r\n        </div>\r\n    )\r\n}\r\n","import React, { } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'; \r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category); \r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounceInRight\">{category}</h3>\r\n            {loading && <p className=\"loading animate__animated animate__flash\">Loading...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map(img => (\r\n                            <GifGridItem key={img.id} {...img}/>\r\n                        ))\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    }); \r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n\r\n           setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n                \r\n      \r\n                \r\n\r\n        })\r\n\r\n    }, [category])\r\n\r\n    return state; \r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Dua Lipa']); \r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"animate__animated animate__bounceInDown\">GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/> \r\n            <hr/>\r\n           \r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => ( \r\n                        <GifGrid key={category} category={category}/>\r\n                    ))\r\n                }\r\n\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp/>,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}